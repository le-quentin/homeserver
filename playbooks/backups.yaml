- name: Setup backups
  hosts: backupservs
  vars:
    docker_volume_backup_root: "{{ ansible_files_root }}/docker-volume-backup"
    backups_dir: "{{ home_dir }}/backups"
  tasks:
    - include_tasks: "tasks/install-docker.yaml"
    - name: Install unzip
      become: yes
      package:
        name: 
          - unzip
    - name: Install rclone (used for syncing backups in the cloud)
      become: yes
      script: "./resources/backups/install-rclone.sh {{ ansible_architecture_alt }}"
      args:
        creates: "/usr/local/bin/rclone"
    - name: Ensure rclone config folder exists
      ansible.builtin.file:
        path:  "{{ home_dir }}/.config/rclone"
        state: directory
        mode: '0755'
        recurse: yes
    - name: Copy rclone config
      copy:
         src: "./resources/backups/rclone.conf"
         dest: "{{ home_dir }}/.config/rclone/rclone.conf"
    - name: Ensure backup folder exists
      ansible.builtin.file:
        path: "{{ backups_dir }}"
        state: directory
        mode: '0755'
    - name: Ensure docker-volume-backup folder exists
      ansible.builtin.file:
        path: "{{ docker_volume_backup_root }}"
        state: directory
        mode: '0755'
    - name: Interpret docker-volume-backup compose template
      template:
        src: "./resources/backups/local-backups-compose.yaml.j2"
        dest: "{{ docker_volume_backup_root }}/compose.yaml"
    - name: Setup the local backups cron
      ansible.builtin.cron:
        name: "local backups"
        user: "{{ ansible_user }}"
        minute: "0"
        hour: "6"
        job: "sudo docker compose -f {{ docker_volume_backup_root }}/compose.yaml up --force-recreate"
    - name: Setup the remote backups cron (pushing to Proton)
      ansible.builtin.cron:
        name: "remote backups"
        user: "{{ ansible_user }}"
        minute: "0"
        hour: "7"
        job: "/usr/local/bin/rclone copy {{ backups_dir }}/ proton:{{ remote_backups_path }}"
        state: "{{ remote_backups_enabled | ternary('present', 'absent') }}"
    # Delete backup files older than 7 days
    # Not a good solution because it doesn't ensure the files were uploaded, which could get bad in case of 
    # TODO - Proper solution that keeps N files for each service, and delete the older ones
    - name: Setup the cron to cleanup old backups locally
      ansible.builtin.cron:
        name: "Cleanup local backups"
        user: "{{ ansible_user }}"
        minute: "30"
        hour: "7"
        job: "find {{ backups_dir }} -name 'backup*.tar.gz' -type f -mtime +7 -delete"
    - name: Ensure scripts folder exists
      ansible.builtin.file:
        path: "{{ home_dir }}/scripts"
        state: directory
        mode: '0755'
    - name: Interpret scripts templates to restore backups
      template:
        src: "./resources/backups/scripts/{{ item | basename }}"
        dest: "{{ home_dir }}/scripts/{{ item | basename | splitext | first }}"
      with_fileglob:
        - "./resources/backups/scripts/*"
    - name: Make all scripts executable
      file:
        path: "{{ home_dir }}/scripts/{{ item | basename | splitext | first }}"
        mode: "0775"
      with_fileglob:
        - "./resources/backups/scripts/*"
