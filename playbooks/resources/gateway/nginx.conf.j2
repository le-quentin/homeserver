user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Docker DNS as a resolver 
    resolver 127.0.0.11 valid=30s ipv6=off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    ##
    # Connection header for WebSocket reverse proxy
    ##
    map $http_upgrade $connection_upgrade {  
        default upgrade;
        ''      close;
    }

    # Default servers when nothing is found, because nginx always return the first server for the current port by default,
    # and we don't want to default on the first service
    server {
        listen      8080 default_server;
        server_name "";
        return      444;
    }

    server {
        listen      80 default_server;
        server_name "";
        return      444;
    }

    ###############################
    #   Public API definition
    ###############################
    # server {
    #     listen 8080;

    #     location /free-stock-tickers {
    #         rewrite ^/free-stock-tickers$ / break;
    #         rewrite ^/free-stock-tickers(.*)$ $1 break;
    #         proxy_pass http://free-stock-tickers;
    #     }
    # }

    ###############################
    #   Private API definition
    ###############################

    server {
	server_name assistant.{{ homeserver_domain }};
        listen 80;

	set $target "http://home-assistant:8123";

        location / {
            proxy_pass $target;

            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection $connection_upgrade;
        }
    }

    server {
	server_name zigbee2mqtt.{{ homeserver_domain }};
	listen 80;

	set $target "http://zigbee2mqtt:8080";

        location / {
            proxy_pass $target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api {
            proxy_pass $target/api;
            proxy_set_header Host $host;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
   }

    # MQTT broker for HomeAssistant to point to
    server {
	server_name mqtt.{{ homeserver_domain }};
	listen 1883;

	set $target "http://mqtt:1883";

        location / {
            proxy_pass $target;
            proxy_set_header Host $http_host;
	}
    }

    server {
	server_name mautic.{{ homeserver_domain }};
	listen 80;

	set $target "http://mautic:80";

        location / {
            proxy_pass $target;
            proxy_set_header Host $http_host;
	}
    }

    server {
	server_name portainer.{{ homeserver_domain }};
	listen 80;

	set $target "http://portainer:9000";

        location / {
            proxy_pass $target;
            proxy_set_header Host $http_host;
	}
    }

    server {
	server_name grafana.{{ homeserver_domain }};
	listen 80;

	set $target "http://grafana:3000";

	location / {
            proxy_pass $target;
            proxy_set_header Host $http_host;
	}

        # Proxy Grafana Live WebSocket connections.
        location /grafana/api/live/ {
            proxy_pass $target;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $http_host;
        }
    }
}
