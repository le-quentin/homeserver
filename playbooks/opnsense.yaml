# TODO add ansible playbook configure the default staging route on proxmox
# ip route replace 10.142.0.0/16 dev vmbr1001 via 10.142.1.1
# Then call the ansible playbooks from Terraform

- name: Setup Opnsense firewall
  hosts: opnsenseservs
  connection: local # Run from the control node (=this machine)
  gather_facts: no # No point in gathering facts on the local machine
  vars:
    lan_interface_device: "vtnet2"
    lan_interface_id: "opt1"
    legacyvlan_interface_id: "opt2"
    config_file_local_path: /tmp/{{ inventory_hostname }}.config.xml
    piserv_ip: "192.168.50.2"
    legacy_vm_ip: "10.142.200.10"
  module_defaults:
    group/ansibleguy.opnsense.all:
      ssl_verify: false
      firewall: "{{ ansible_host }}"
      api_key: "{{ opnsense_api_key }}"
      api_secret: "{{ opnsense_api_secret }}"
  tasks:
    - name: Create legacy VLAN
      ansibleguy.opnsense.interface_vlan:
        description: "Legacy network, with all containers deployed on the same host"
        interface: "{{ lan_interface_device }}"
        vlan: 200
    # interfaces assignment
    - name: Import interfaces config file from host
      connection: ssh
      ansible.builtin.fetch:
        src: /conf/config.xml
        dest: "{{ config_file_local_path }}"
        flat: yes
      vars:
        ansible_python_interpreter: /usr/local/bin/python3
    # TODO turn into a role with proper defaults etc
    - include_tasks: tasks/setup-firewall-interface.yaml
      loop: "{{ interfaces | dict2items }}"
      loop_control:
        loop_var: interface
    # TODO make backup conf file
    - name: Update interfaces config file
      connection: ssh
      become: yes
      copy:
        src: "{{ config_file_local_path }}"
        dest: /conf/config.xml
      vars:
        ansible_python_interpreter: /usr/local/bin/python3
      register: ifconfig
      # Test if really needed
    - name: Reboot to parse new config
      ansibleguy.opnsense.system:
        action: reboot
      when: ifconfig.changed
    # Aliases
    - name: privateips alias 
      ansibleguy.opnsense.alias:
        name: "privateips"
        type: "network"
        content: ["192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8"]
    - name: physicallan alias
      ansibleguy.opnsense.alias:
        name: "physicallan"
        type: "network"
        content: ["192.168.50.0/24"]
    - name: dnsservs alias 
      ansibleguy.opnsense.alias:
        name: "dnsservs"
        type: "host"
        content: ["192.168.50.1", "10.142.1.1"]
    - name: virtuallan alias
      ansibleguy.opnsense.alias:
        name: "virtuallan"
        type: "network"
        content: ["10.142.0.0/16"]
    - name: httpnetworks alias
      ansibleguy.opnsense.alias:
        name: "httpnetworks"
        type: "network"
        content: ["10.142.200.0/24"]
    - name: ansiblehosts alias
      ansibleguy.opnsense.alias:
        name: "ansiblehosts"
        type: "host"
        content: ["10.142.200.10"]
    - name: List aliases
      ansibleguy.opnsense.list:
        target: alias
    # Rules
    # TODO rules from vars, and purge mechanism for rules not defined here
    - name: Legacy VLAN internet access
      ansibleguy.opnsense.rule:
        interface: "{{ legacyvlan_interface_id }}"
        source_net: "any"  # host, network, alias or "any"
        destination_net: "privateips"
        destination_invert: true
        description: "Legacy VLAN internet access"
        match_fields: ["description"]
    - name: Legacy VLAN HTTP access
      ansibleguy.opnsense.rule:
        interface: "{{ lan_interface_id }}"
        protocol: "TCP"
        destination_net: "httpnetworks"
        destination_port: "http"
        description: "Legacy VLAN HTTP access"
        match_fields: ["description"]
    - name: Legacy VLAN DNS access
      ansibleguy.opnsense.rule:
        interface: "{{ legacyvlan_interface_id }}"
        source_net: "any"  # host, network, alias or "any"
        destination_net: "dnsservs"
        description: "Legacy VLAN DNS access"
        match_fields: ["description"]
    - name: Physical LAN DNS access
      ansibleguy.opnsense.rule:
        interface: "{{ lan_interface_id }}"
        source_net: "physicallan"  # host, network, alias or "any"
        protocol: "{{ item }}"
        destination_port: "53"
        destination_net: "dnsservs"
        description: "Physical LAN -> DNS servers ({{ item }})"
        match_fields: ["description"]
      loop:
        - "TCP"
        - "UDP"
    - name: ansiblehosts SSH access 
      ansibleguy.opnsense.rule:
        interface: "{{ lan_interface_id }}"
        protocol: "TCP"
        destination_net: "ansiblehosts"
        destination_port: "ssh"
        description: "ansiblehosts SSH access"
        match_fields: ["description"]
    - name: LAN/VLAN pings in
      ansibleguy.opnsense.rule:
        interface: ["lan", "opt1", "opt2"]
        # source_net: "virtuallan"  # host, network, alias or "any"
        protocol: "ICMP"
        # destination_net: "virtuallan"
        description: "Allow ping  to all local hosts"
        match_fields: ["description"]
    - name: LAN/VLAN pings out
      ansibleguy.opnsense.rule:
        direction: "out"
        interface: ["lan", "opt1", "opt2"]
        # source_net: "virtuallan"  # host, network, alias or "any"
        protocol: "ICMP"
        # destination_net: "virtuallan"
        description: "Allow ping from all local hosts"
        match_fields: ["description"]
    - name: List rules
      ansibleguy.opnsense.list:
        target: rule
    # Unbound DNS
    - name: DNS - whole domain redirected to legacy homserver VM
      ansibleguy.opnsense.unbound_host:
        hostname: "*"
        domain: "staging.home"
        value: "{{ legacy_vm_ip }}"
        match_fields: ["description"]
        description: "whole domain redirected to legacy homserver VM"
        # record_type: 'A'
        # prio: 10
        # state: 'present'
        # reload: true
        # enabled: true
        # debug: false
    - name: DNS - prod redirected to pi temporarily (until prod DNS implemented)
      ansibleguy.opnsense.unbound_host:
        hostname: "*"
        domain: "home"
        value: "{{ piserv_ip }}"
        match_fields: ["description"]
        description: "prod redirected to pi temporarily (until prod DNS implemented)"
    - name: Listing
      ansibleguy.opnsense.list:
        target: 'unbound_host'
      register: existing_entries

