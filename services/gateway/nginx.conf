user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    ##
    # Connection header for WebSocket reverse proxy
    ##
    map $http_upgrade $connection_upgrade {  
        default upgrade;
        ''      close;
    }

    ###############################
    #   Services list
    ###############################
    upstream home-assistant {
        server home-assistant:8123;
    }

    upstream free-stock-tickers {
        server free-stock-tickers:3000;
    }

    upstream grafana {
        server grafana:3000;
    }

    upstream mautic {
        server mautic:80;
    }

    ###############################
    #   Public API definition
    ###############################
    server {
        listen 8080;

        # Docker DNS as a resolver 
        resolver 127.0.0.11 valid=30s ipv6=off;

        location /free-stock-tickers {
            rewrite ^/free-stock-tickers$ / break;
            rewrite ^/free-stock-tickers(.*)$ $1 break;
            proxy_pass http://free-stock-tickers;
        }
    }

    ###############################
    #   Private API definition
    ###############################
    server {
        listen 80;
	server_name home;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Docker DNS as a resolver 
        # resolver 127.0.0.11 valid=30s ipv6=off;

        location /mautic/ {
            proxy_set_header Host $http_host;
            proxy_pass http://mautic;
        }

        location /grafana/ {
            proxy_set_header Host $http_host;
            proxy_pass http://grafana;
        }

        # Proxy Grafana Live WebSocket connections.
        location /grafana/api/live/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $http_host;
            # rewrite  ^/grafana/(.*)  /$1 break;
            proxy_pass http://grafana;
        }

    }

    server {
	server_name assistant.home;
        listen 80;

        location / {
            proxy_pass http://home-assistant;

            proxy_set_header Host $http_host;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection $connection_upgrade;
        }
    }

}
