---
- name: Initialise role variables (check required inputs, and set computed values)
  ansible.builtin.include_tasks: init-vars.yml
- name: Namespace
  kubernetes.core.k8s:
    name: "{{ k3s_service_namespace }}"
    api_version: v1
    kind: Namespace
-  block:
    - name: "{{ task_name_prefix }} Update all k3s resources for the service [{{ k3s_service_state }}]"
      when: _action in ['create', 'delete']
      module_defaults:
        kubernetes.core.k8s:
          namespace: "{{ k3s_service_namespace }}"
          apply: true
      block:
        - name: "{{ task_name_prefix }} Set facts"
          ansible.builtin.set_fact:
            resources_state: "{{ 'absent' if _action == 'delete' else 'present' }}"
        - name: Copy restore script to target host
          become: true
          ansible.builtin.copy:
            src: "{{ role_path }}/files/restore-script.sh"
            dest: "/usr/local/bin/restore-script.sh"
            mode: "0755"
        - name: "{{ task_name_prefix }} ConfigMaps"
          kubernetes.core.k8s:
            state: "{{ 'present' if resources_state == 'present' and config_map_enabled else 'absent' }}"
            template: "configmap.yml.j2"
            append_hash: true
          register: configmap
        - name: "{{ task_name_prefix }} Secrets"
          when: "{{ tls_certificates_enabled }}"
          kubernetes.core.k8s:
            state: "{{ resources_state }}"
            template: "secrets.yaml.j2"
        - name: "{{ task_name_prefix }} Register configmap name"
          when: config_map_enabled and resources_state == 'present'
          ansible.builtin.set_fact:
            configmap_name: "{{ configmap.result.metadata.name }}"
        - name: "{{ task_name_prefix }} StorageClass"
          kubernetes.core.k8s:
            state: present
            template: "storage-classes.yaml.j2"
        - name: "{{ task_name_prefix }} Storage"
          with_items: "{{ data_volumes }}"
          loop_control:
            loop_var: "volume"
          ansible.builtin.include_tasks: setup-storage.yml
        - name: "{{ task_name_prefix }} Deployment"
          kubernetes.core.k8s:
            state: "{{ resources_state }}"
            template: "deployment.yaml.j2"
        - name: "{{ task_name_prefix }} Service"
          kubernetes.core.k8s:
            state: "{{ resources_state }}"
            template: "service.yaml.j2"
        - name: "{{ task_name_prefix }} Ingress"
          kubernetes.core.k8s:
            state: "{{ resources_state }}"
            template: "ingress.yaml.j2"
        - name: "{{ task_name_prefix }} Backups"
          ansible.builtin.include_tasks: backups.yml
    - name: "{{ task_name_prefix }} Restart the service (by deleting the pods)"
      when: _action == 'restart'
      module_defaults:
        kubernetes.core.k8s:
          namespace: "{{ k3s_service_namespace }}"
      block:
        - name: "{{ task_name_prefix }} Delete all pods so that they get recreated"
          kubernetes.core.k8s:
            kind: pod
            state: absent
            delete_all: true

