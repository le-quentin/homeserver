#!/bin/bash

set -e

# Configurable variables
RCLONE_REMOTE="{{ item.target }}" # Replace with your rclone remote
GROUP_REGEX="(.*)[0-9]{4}"                  # Regex to group files
LOCAL_DEST="{{ item.src }}"      # Local destination path

# Fetch the list of files recursively
FILES=$(rclone lsf "$RCLONE_REMOTE" --files-only --recursive)

# Declare an associative array for grouped files
declare -A file_groups

# Group files by regex
while IFS= read -r file; do
  if [[ $file =~ $GROUP_REGEX ]]; then
    group_key="${BASH_REMATCH[1]}"
    file_groups["$group_key"]+="$file"$'\n'
  fi
done <<< "$FILES"

# Iterate over each group
for group_key in "${!file_groups[@]}"; do
  echo "Processing group: $group_key"

   # Read the group files into a properly handled list
  group_files=$(echo -e "${file_groups[$group_key]}")
  # Sort files and get the latest one
  latest_file=$(echo "$group_files" | sort | tail -n 1)

  if [[ -n "$latest_file" ]]; then
    echo "Fetching the latest file: $latest_file"

    # Determine the local path preserving the directory structure
    remote_path_dir=$(dirname "$latest_file")
    local_target_dir="$LOCAL_DEST/$remote_path_dir"
    
    # Create the local directory if it doesn't exist
    sudo -u "{{ backups_user }}" mkdir -p "$local_target_dir"

    # Copy the file to the local destination
    sudo rclone copy --config /opt/rclone/rclone.conf "$RCLONE_REMOTE/$latest_file" "$local_target_dir"

    # Change ownership to NFS user and group
    sudo chown -R "{{ backups_user }}:{{ backups_user }}" "$local_target_dir"

    echo "File $latest_file copied to $local_target_dir"
  else
    echo "No files found for group $group_key"
  fi
done
