---
- name: Set restore facts
  ansible.builtin.set_fact:
    backup: "latest" # Latest or filename
    postgresql_users: []
    postgresql_databases: >-
      {{ postgres_databases | selectattr('name', 'equalto', db) | map('combine', {'name': 'tmp'}) }}

- name: Find backups directory
  ansible.builtin.set_fact:
    backups_dir: "{{ backups_root }}/{{ db }}"
    backups_user: "{{ postgres_backup_user | default('postgres') }}"

- name: Get the latest backup file
  when: backup == "latest"
  block:
    # - name: List all backups
    #   become: true
    #   become_user: "postgres"
    #   ansible.builtin.file:
    #     path: "{{ backups_dir }}"
    #     state: existing
    #
    - name: List all backups
      become: true
      become_user: "{{ backups_user }}"
      ansible.builtin.find:
        paths: "{{ backups_dir }}"
      register: all_backups
    - name: Verify the backups folder was found
      ansible.builtin.assert:
        that: all_backups.skipped_paths | length == 0
        fail_msg: "The backups folder {{ backups_dir }} is not found or not reachable for {{ backups_user }} user"
    - name: Get latest file
      ansible.builtin.set_fact:
        backup: "{{ (all_backups.files | sort(attribute='mtime') | last).path | basename }}"
    - name: Message to user
      ansible.builtin.debug:
        msg: "No backup arg, using latest dump: {{ backup }}"

- name: Remove the existing tmp db
  become: true
  become_user: postgres
  community.general.postgresql_db:
    state: "absent"
    name: "tmp"
  vars:
    ansible_ssh_pipelining: true
- name: Call postgres setup role to create the tmp database with the right settings
  become: true
  ansible.builtin.import_role:
    name: geerlingguy.postgresql
  vars:
    ansible_ssh_pipelining: true
    postgres_users_no_log: "{{ postgres_no_log }}"

- name: Copy the backup file
  become: true
  become_user: "{{ backups_user }}"
  ansible.builtin.copy:
    remote_src: true
    src: "{{ backups_dir }}/{{ backup }}"
    dest: "/tmp/"
    mode: "0744"

- name: Restore from the backup file to temporary db
  become: true
  become_user: postgres
  ansible.builtin.shell:
    cmd: >
      set -o pipefail && gunzip -c "/tmp/{{ backup }}" | pg_restore -d tmp
    executable: /bin/bash

  changed_when: true

- name: Collect info about databases
  become: true
  become_user: postgres
  community.postgresql.postgresql_info:
    filter:
      - "databases"
  register: info
  vars:
    ansible_ssh_pipelining: true

- name: Secure the existing database if it is there
  when: db in info.databases
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  block:
    - name: Stop connections to the existing database
      community.postgresql.postgresql_query:
        db: "{{ db }}"
        query:
          # Delete all connections but this one
          - >
            SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = '{{ db }}' AND pid <> pg_backend_pid()
    - name: Rename the existing database (the copy will be kept for a little while just in case)
      community.postgresql.postgresql_db:
        state: rename
        name: "{{ db }}"
        target: "before_restore.{{ db }}.{{ '%Y-%m-%d-%H-%M-%S' | strftime(ansible_date_time.epoch) }}"

- name: Make the tmp database the new database
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  community.postgresql.postgresql_db:
    state: rename
    name: "tmp"
    target: "{{ db }}"

# TODO use a cron and `psql -c "\l" --csv --tuples-only` to purge before_restore. dbs
