---
- name: Verify inputs
  ansible.builtin.import_tasks: verify_inputs.yml

- name: Set the general facts
  ansible.builtin.import_tasks: general_facts.yml
  tags: always

- name: Set the install facts
  ansible.builtin.import_tasks: install_facts.yml
  tags: always

- name: Set the databases facts
  ansible.builtin.import_tasks: databases_facts.yml
  tags: always

- name: Set backups facts
  tags: never,backup,restore
  ansible.builtin.set_fact:
    backup_dir: "/backups/{{ db }}"
    backups_root: "/backups"

- name: Restore from backup
  ansible.builtin.import_tasks: restore.yml
  tags: never,restore
  vars:
    ansible_ssh_pipelining: true

- name: Call postgres setup role
  become: true
  when: "'restore' not in ansible_run_tags"
  ansible.builtin.import_role:
    name: geerlingguy.postgresql
  vars:
    postgres_users_no_log: "{{ postgres_no_log }}"
  tags: always

- name: Every created user becomes owner of the public schema of its database
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  community.postgresql.postgresql_owner:
    db: "{{ item.name }}"
    new_owner: "{{ item.user }}"
    obj_name: public
    obj_type: schema
  with_items: "{{ present_databases }}"
  no_log: "{{ postgres_no_log }}"
  tags: install

- name: Setup backups
  ansible.builtin.import_tasks: setup_backups.yml
  tags: install

- name: Run a backup
  no_log: "{{ postgres_no_log }}"
  tags: never,backup
  block:
    - name: Update the create-backup script
      become: true
      ansible.builtin.copy:
        src: "./create-backup.sh"
        dest: "/usr/local/bin"
        mode: "0744"
    - name: Run the backup
      ansible.builtin.command:
        cmd: "create-backup.sh {{ db }}"
      changed_when: true
