services:
  {{ homelab_app_name }}:
    networks:
      - {{ homelab_app_traefik_network }}
    container_name: {{ homelab_app_name }}
    labels:
      traefik.enable: "true"
      traefik.http.routers.{{ homelab_app_name }}.rule: "Host(`{{ homelab_app_full_dns_name }}`)"
      traefik.http.services.{{ homelab_app_name }}.loadbalancer.server.port: "{{ homelab_app_internal_port }}"  # internal port
      docker-volume-backup.stop-during-backup: {{ homelab_app_name }}
{% if homelab_app_backups_enabled %}
{% for item in homelab_app_backups %}
{% set volume_full_name = homelab_app_name ~ '-' ~ item.volume %}
  backup-{{ item.volume }}:
    image: offen/docker-volume-backup:v2.43.3
    container_name: {{ homelab_app_name }}-backup-{{ item.volume }}
    labels:
      - homelab.container-category=backup
    environment:
      BACKUP_FILENAME: "backup-{{ volume_full_name }}-%Y-%m-%dT%H-%M-%S.tar.gz"
      BACKUP_STOP_DURING_BACKUP_LABEL: {{ homelab_app_name }}
      GZIP_PARALLELISM: 3
    volumes:
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup and to access the container labels to
      # specify custom commands. You can omit this if you don't want to
      # stop the container or run custom commands. In case you need to
      # proxy the socket, you can also provide a location by setting
      # `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - {{ volume_full_name }}:/backup/{{ item.volume }}:ro # backup of a volume
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - {{ homelab_app_backups_target_dir }}:/archive
    restart: always
{% endfor %}
{% endif %}
networks:
  {{ homelab_app_traefik_network }}:
    external: true

