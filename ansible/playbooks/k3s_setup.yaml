---
- name: Setup k3s cluster (install k3s and helm on nodes)
  hosts: k3scontroller
  vars:
    k3s_become: true
  tasks:
    - name: Python dependencies for kubernetes modules
      block:
        - name: Copy requirements.txt
          ansible.builtin.copy:
            src: "resources/k3s_setup/requirements.txt"
            dest: "/tmp/requirements.txt"
            mode: "0600"
        - name: Install requirements
          ansible.builtin.pip:
            requirements: /tmp/requirements.txt

    - name: Check if k3s is installed
      ansible.builtin.command: k3s --version
      register: k3s_installed
      ignore_errors: true
      failed_when: false
      changed_when: false
    - name: Setup k3s_server
      when: k3s_installed.rc != 0
      block:
        - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
          become: true
          ansible.builtin.shell: |
            swapoff -a
          changed_when: true
        - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
          become: true
          ansible.builtin.replace:
            path: /etc/fstab
            regexp: "^([^#].*?\\sswap\\s+sw\\s+.*)$"
            replace: "# \\1"
        - name: Install k3s
          ansible.builtin.include_role:
            name: xanmanning.k3s
          vars:
            k3s_release_version: v1.31.3+k3s1
            # TODO set node-status-update-frequency to something like 5s here, cuz the 5 minutes timeout by default in k3s is a lil long in a non HA setup
            k3s_server:
              node-name: controller-vm
              node-label:
                - "high-io-storage=true"

              cluster-cidr: "{{ k3s_cluster_cidr }}"
              service-cidr: "{{ k3s_services_cidr }}"
              cluster-dns: "{{ k3s_cluster_dns }}"
              write-kubeconfig-mode: "{{ k3s_write_kubeconfig_mode | default('0600') }}"
              debug: "{{ k3s_debug | default(false) }}"
    - name: Ensure kube folder exists
      ansible.builtin.file:
        path: "{{ home_dir }}/.kube"
        state: directory
        mode: "0744"
    - name: Copy k3s config for user
      become: true
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        remote_src: true
        dest: "{{ home_dir }}/.kube/config"
        owner: "{{ ansible_user }}"
        mode: "0600"
        force: false

    - name: Install helm
      ansible.builtin.include_role:
        name: geerlingguy.helm
      vars:
        helm_version: v3.16.3
        helm_platform: linux
        helm_arch: "{{ ansible_architecture_alt }}"

    - name: Setup NFS access
      block:
        - name: "Install nfs-common package"
          become: true
          ansible.builtin.package:
            name: nfs-common
        - name: "Create the csi-driver-nfs namespace"
          kubernetes.core.k8s:
            kind: Namespace
            api_version: v1
            name: csi-driver-nfs
        - name: "Add the csi-driver-nfs helm repo"
          kubernetes.core.helm_repository:
            name: csi-driver-nfs
            repo_url: "https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/charts"
        - name: "Install csi-driver-nfs via helm"
          kubernetes.core.helm:
            name: csi-driver-nfs
            chart_ref: csi-driver-nfs/csi-driver-nfs
            chart_version: 4.9.0
            release_namespace: csi-driver-nfs
            values:
              controller:
                defaultOnDeletePolicy: retain
              externalSnapshotter:
                enabled: true

    - name: Setup cert-manager
      block:
        - name: Add cert-manager helm repo
          kubernetes.core.helm_repository:
            name: jetstack
            repo_url: https://charts.jetstack.io

        - name: Create cert-manager namespace
          kubernetes.core.k8s:
            kind: Namespace
            api_version: v1
            name: cert-manager

        - name: Install cert-manager via helm
          kubernetes.core.helm:
            name: cert-manager
            chart_ref: jetstack/cert-manager
            release_namespace: cert-manager
            create_namespace: false
            values:
              installCRDs: true
          register: cert_manager_install

        - name: Wait for cert-manager webhook to be ready
          when: cert_manager_install.changed
          ansible.builtin.wait_for:
            timeout: 30

        - name: Create Let's Encrypt ClusterIssuer
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: "{{ cert_manager_issuer_name }}"
              spec:
                acme:
                  server: "{{ cert_manager_server }}"
                  email: "{{ cert_manager_email }}"
                  privateKeySecretRef:
                    name: "{{ cert_manager_issuer_name }}"
                  solvers:
                    - http01:
                        ingress:
                          class: traefik
