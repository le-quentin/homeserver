---
- name: Install and setup PostgreSQL
  hosts: postgresservs
  become: true
  roles:
    - role: geerlingguy.postgresql
      become: true
      vars:
        postgres_users_no_log: false
  pre_tasks:

    - name: Set facts for global options
      ansible.builtin.set_fact:
        postgresql_global_config_options: "{{ (postgresql_global_config_options | default([])) + global_options }}"
    - name: Set facts for databases and access
      ansible.builtin.set_fact:
        postgresql_databases: >-
          {{
            (postgresql_databases | default([])) + [{
              'name': item.name
            }]
          }}
        postgresql_users: >-
          {{
            (postgresql_users | default([])) + [{
              'db': item.name,
              'name': item.user,
              'password': item.password,
              'encrypted': true,
              'priv': 'CONNECT/CREATE'
            }]
          }}
        # TODO turn into a role to get more flexible settings for access to each database with default etc 
        postgresql_hba_entries: >-
          {{
            (postgresql_hba_entries | default([
              { 'type': 'local', 'database': 'all', 'user': 'postgres', 'auth_method': 'peer' },
              { 'type': 'local', 'database': 'all', 'user': 'all', 'auth_method': 'peer' },
              { 'type': 'host', 'database': 'all', 'user': 'all', 'address': '127.0.0.1/32', 'auth_method': 'md5' },
              { 'type': 'host', 'database': 'all', 'user': 'all', 'address': '::1/128', 'auth_method': 'md5' }
          ])) + [
            { 'type': 'host', 'database': item.name, 'user': item.user, 'address': lan_cidr, 'auth_method': 'md5' },
            { 'type': 'host', 'database': item.name, 'user': item.user, 'address': k3s_cluster_cidr, 'auth_method': 'md5' }
          ]
          }}
      with_items: "{{ databases }}"
  # post_tasks:
  #   - name: Grant privileges to users
  #     with_items: "{{ databases }}"
  #     community.postgresql.postgresql_privs:
  #       roles: "{{ item.user }}"
  #       database: "{{ item.name }}"
  #       state: present
  #       privs: SELECT,CREATE,INSERT,UPDATE,DELETE
  #       type: database
  #       # objs: books,authors
  #       # schema: public
  #       # roles: librarian,reader
  #       # grant_option: true


    # no_log: true
      # lc_collate: # defaults to 'en_US.UTF-8'
      # lc_ctype: # defaults to 'en_US.UTF-8'
      # encoding: # defaults to 'UTF-8'
      # template: # defaults to 'template0'
      # login_host: # defaults to 'localhost'
      # login_password: # defaults to not set
      # login_user: # defaults to 'postgresql_user'
      # login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
      # port: # defaults to not set
      # owner: # defaults to postgresql_user
      # state: # defaults to 'present

  # pre_tasks:
  #   - name: "Install packages"
  #     ansible.builtin.package:
  #       name:
  #         - postgresql
  #         - postgresql-server
  # 
  #   - name: "Install Python packages"
  #     ansible.builtin.pip:
  #       name:
  #         - psycopg2-binary
  # 
  # tasks:
  #   - name: "Find out if PostgreSQL is initialized"
  #     ansible.builtin.stat:
  #       path: "/var/lib/pgsql/data/pg_hba.conf"
  #     register: postgres_data
  # 
  #   - name: "Initialize PostgreSQL"
  #     ansible.builtin.command: "postgresql-setup initdb"
  #     when: not postgres_data.stat.exists
  #     changed_when: true
  # 
  #   - name: "Start and enable postgres service"
  #     ansible.builtin.service:
  #       name: postgresql
  #       state: started
  #       enabled: true
  # 
  # handlers:
  #   - name: Restart postgres
  #     ansible.builtin.service:
  #       name: postgresql
  #       state: restarted
