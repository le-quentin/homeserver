// Grafana Alloy configuration for collecting Docker logs and metrics
// Based on official documentation: https://grafana.com/docs/alloy/latest/monitor/monitor-docker-containers/

// Discover Docker containers
discovery.docker "homelab_apps" {
  host = "unix:///var/run/docker.sock"
  filter {
    name = "label"
    values = [
      "monitoring.logs.enabled=true",
    ]
  }
}

// Collect logs from Docker containers
loki.source.docker "default" {
  host = "unix:///var/run/docker.sock"
  targets = discovery.docker.homelab_apps.targets
  labels = {"platform" = "docker"}
  relabel_rules = discovery.relabel.homelab_apps.rules
  forward_to = [loki.process.docker_logs.receiver]
}

// Process Docker logs
loki.process "docker_logs" {
  forward_to = [loki.write.local.receiver]

  stage.replace {
    expression = "(?i).*\\[(trace|tra|trc)\\].*"
    replace    = "trace"
  }

  stage.replace {
    expression = "(trace).*\\[(debug|dbg)\\].*"
    replace    = "debug"
  }

  stage.replace {
    expression = "(?i).*\\[(info|inf)\\].*"
    replace    = "info"
  }

  stage.replace {
    expression = "(?i).*\\[(warning|warn|wrn)\\].*"
    replace    = "warning"
  }

  stage.replace {
    expression = "(?i).*\\[(error|err)\\].*"
    replace    = "error"
  }

  stage.replace {
    expression = "(?i).*\\[(critical)\\].*"
    replace    = "critical"
  }

  stage.replace {
    expression = "(?i).*\\[(fatal|fat|ftl)\\].*"
    replace    = "fatal"
  }

  stage.regex {
    expression = "(?i)\\[(?P<parsed_level>info|warn|error|critical|fatal|debug|trace)\\]"
  }

  stage.template {
    source   = "level_cleansed"
    template = `{% raw %}{{ default .detected_level .parsed_level }}{% endraw %}`
  }

  stage.template {
    source   = "level_or_info"
    // TODO - This doesn't really work because detected_level is "unknown" sometimes. To be fixed
    template = `{% raw %}{{ default "info" .level_cleansed }}{% endraw %}`
  }

  stage.labels {
    values = {
      detected_level = "native_level_or_default",
    }
  }
}

// Relabel rules for Docker containers
discovery.relabel "homelab_apps" {
  targets = discovery.docker.homelab_apps.targets

  rule {
    source_labels = ["__meta_docker_container_label_monitoring_logs_app_name"]
    target_label = "app"
  }

  rule {
    source_labels = ["__meta_docker_container_name"]
    regex = "/(.*)"
    target_label = "container_name"
  }

  rule {
    source_labels = ["__meta_docker_container_log_stream"]
    target_label = "stream"
  }
}

// export node metrics
prometheus.exporter.unix "node_metrics" {
}

discovery.relabel "node_metrics" {
	targets = prometheus.exporter.unix.node_metrics.targets

	rule {
		action       = "replace"
		target_label = "job"
		replacement  = "integrations/unix"
	}

	rule {
		action       = "replace"
		target_label = "__hostname__"
		replacement  = "{{ inventory_hostname }}"
	}

	rule {
		action        = "replace"
		source_labels = ["__address__"]
		target_label  = "__port__"
		regex         = ".*:(.*)"
		replacement   = "$1"
	}

	rule {
		action        = "replace"
		source_labels = ["__hostname__", "__port__"]
		separator     = ":"
		target_label  = "instance"
	}
}

// Scrape node metrics
prometheus.scrape "node_metrics" {
  targets = discovery.relabel.node_metrics.output
  forward_to = [prometheus.remote_write.docker_metrics.receiver]
  scrape_interval = "15s"
}

// cAdvisor exporter for container metrics
prometheus.exporter.cadvisor "docker_metrics" {
  docker_host = "unix:///var/run/docker.sock"
  storage_duration = "5m"
}

// Scrape cAdvisor metrics
prometheus.scrape "docker_metrics" {
  targets = prometheus.exporter.cadvisor.docker_metrics.targets
  forward_to = [prometheus.remote_write.docker_metrics.receiver]
  scrape_interval = "15s"
}

// Write metrics to Prometheus
prometheus.remote_write "docker_metrics" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// System logs discovery (for host system logs)
local.file_match "system_logs" {
  path_targets = [{
    __address__ = "localhost",
    __path__ = "/var/log/*log",
  }]
}

// System logs scraping
loki.source.file "system_scrape" {
  targets = local.file_match.system_logs.targets
  forward_to = [loki.process.system_logs.receiver]
  tail_from_end = true
}

// Process system logs
loki.process "system_logs" {
  forward_to = [loki.write.local.receiver]

  stage.labels {
    values = {
      filename = "__path__",
      job = "alloy",
      platform = "system",
    }
  }

  stage.timestamp {
    source = "time"
    format = "RFC3339Nano"
  }
}

// Write logs to Loki
loki.write "local" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
  external_labels = {
    "job" = "alloy",
    "instance" = "homelab",
  }
}
