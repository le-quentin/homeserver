- name: "Deploy jellyfin"
  hosts: jellyfin
  roles:
    - homelab-app
  vars:
    homelab_app_name: jellyfin
    homelab_app_traefik_network: traefik
    homelab_app_apps_domain: "{{ homeserver_domain }}"
    homelab_app_internal_port: 8096
    homelab_app_compose_template: "resources/jellyfin/compose.yml.j2"
    homelab_app_volume_names:
      - config
      - cache
    homelab_app_backups:
      - volume: config
        cron: "0 6 * * *"

    gpu_card_path: "/dev/dri/renderD128" # Device id from the vm
    gpu_group: "render" # According to jellyfin docs, is one of [video, input, render] depending on OS
    media_disk_id: "c36cbb4b-35c2-4688-86bb-9faf55208a03"

  pre_tasks:
    - name: Create systemd mount unit for /mnt/media
      become: true
      ansible.builtin.template:
        src: ./resources/jellyfin/mnt-media.mount.j2
        dest: /etc/systemd/system/mnt-media.mount
        owner: root
        group: root
        mode: '0644'
      register: mount_template
    - name: Create systemd automount unit for /mnt/media
      become: true
      ansible.builtin.template:
        src: ./resources/jellyfin/mnt-media.automount.j2
        dest: /etc/systemd/system/mnt-media.automount
        owner: root
        group: root
        mode: '0644'
      register: automount_template
    - name: Reload systemd and enable/start automount
      become: true
      when: automount_template.changed
      ansible.builtin.systemd:
        name: mnt-media.automount
        enabled: true
        state: restarted
        daemon_reload: true

    # Setup the GPU for passthrough
    - name: Ensure non-free components are enabled in all apt source stanzas
      become: true
      ansible.builtin.replace:
        path: /etc/apt/sources.list.d/debian.sources
        regexp: '^(Components:\s*main)(?!.*non-free)'
        replace: '\1 contrib non-free non-free-firmware'
      register: sources_update

    - name: Update apt cache
      become: true
      ansible.builtin.apt:
        update_cache: true
      when: sources_update.changed

    - name: Ensure intel GPU packages are installed
      become: true
      ansible.builtin.apt:
        name:
          - firmware-misc-nonfree
          - intel-media-va-driver-non-free
        state: present
        update_cache: true
      register: gpu_packages
    - name: Add user to 'render' group
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: render
        append: true
    - name: Reboot if firmware packages were newly installed
      become: true
      ansible.builtin.reboot:
        msg: "Rebooting to activate Intel GPU firmware"
        connect_timeout: 10
        reboot_timeout: 300
        test_command: uptime
      when: gpu_packages is changed
    - name: "Get id of the render group"
      changed_when: false
      shell: "set -o pipefail && getent group {{ gpu_group }} | cut -d: -f3"
      args:
        executable: /bin/bash
      register: render_group
    - name: "Set render_group_id"
      ansible.builtin.set_fact:
        render_group_id: "{{ render_group.stdout }}"
