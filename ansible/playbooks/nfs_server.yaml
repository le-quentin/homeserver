---
- name: Setup NFS server
  become: true
  hosts: nfsservs
  tasks:
    - name: Create nfs group
      become: true
      ansible.builtin.group:
        name: nfs
        gid: 4242
    - name: Create nfs user
      become: true
      ansible.builtin.user:
        name: nfs
        uid: 4242
        group: nfs

    # Install ZFS role or playbook or task file
    - name: Ensure apt cache is updated
      ansible.builtin.apt:
        update_cache: true
    # - name: Add ZFS repository (backports)
    #   ansible.builtin.apt_repository:
    #     repo: "deb http://deb.debian.org/debian bookworm-backports main contrib"
    #     state: present
    # - name: Add ZFS source repository (optional)
    #   ansible.builtin.apt_repository:
    #     repo: "deb-src http://deb.debian.org/debian bookworm-backports main contrib"
    #     state: present
    #
    # Use this instead if issues (older version more tested with Debian)
    - name: Add ZFS repository
      ansible.builtin.apt_repository:
        repo: "deb http://deb.debian.org/debian bookworm contrib"
        state: present
    - name: Update apt cache after adding ZFS repositories
      ansible.builtin.apt:
        update_cache: true
    - name: Install ZFS kernel module and tools
      ansible.builtin.apt:
        name:
          - "linux-headers-{{ ansible_kernel }}"
          - zfs-dkms
          - zfsutils-linux
        state: present
    - name: Ensure ZFS module is loaded
      community.general.modprobe:
        name: zfs
        state: present
    - name: Enable ZFS services at boot
      ansible.builtin.systemd:
        name: zfs-import-cache
        enabled: true
        state: started
    - name: Verify ZFS installation
      ansible.builtin.command: zfs --version
      register: zfs_version
      changed_when: false
    - name: Debug ZFS version
      ansible.builtin.debug:
        msg: "ZFS installed successfully: {{ zfs_version.stdout }}"
    - name: Create a ZFS pool
      ansible.builtin.command:
        # TODO pool_name and partition_name var
        cmd: zpool create -f nfs_pool /dev/sdb
      register: zpool_result
      changed_when: "'pool already exists' not in zpool_result.stderr and 'is in use' not in zpool_result.stderr"
      failed_when: "zpool_result.rc != 0 and 'is in use' not in zpool_result.stderr"

    - name: Create a zfs file system for k3s volumes
      community.general.zfs:
        name: nfs_pool/k3s_volumes
        state: present
        extra_zfs_properties:
          mountpoint: /srv/nfs/k3s/volumes
    - name: Create a zfs file system for each k3s app
      community.general.zfs:
        name: "nfs_pool/k3s_volumes/{{ item }}"
        state: present
        extra_zfs_properties:
          mountpoint: "/srv/nfs/k3s/volumes/{{ item }}"
      loop:
        - home-assistant

    - name: List database nfs exports
      ansible.builtin.set_fact:
        database_nfs_exports:
          - "/srv/nfs/backups/postgres {{ database_ip }}(rw,sync,no_subtree_check)"
    - name: List k3s nfs exports
      ansible.builtin.set_fact:
        k3s_nfs_exports: >
          {{
            (nfs_exports | default([])) + [
               '/srv/nfs/k3s/volumes/'~item~' '~k3s_controller_ip~'(rw,sync,no_subtree_check)'
            ]
          }}
      loop:
        - home-assistant
    - name: Install nfs server
      ansible.builtin.include_role:
        name: "geerlingguy.nfs"
      vars:
        nfs_exports: "{{ database_nfs_exports + k3s_nfs_exports }}"
    - name: Setup permissions for exported k3s volumes directory
      ansible.builtin.file:
        dest: "/srv/nfs/k3s/volumes"
        owner: nobody # TODO improve security of this
        group: nogroup
        mode: "744"
        recurse: true
    - name: Setup permissions for exported posgtres backups directory
      ansible.builtin.file:
        dest: "/srv/nfs/backups/postgres"
        owner: nfs
        group: nfs
        mode: "744"
        recurse: true
